name: Wda Server Build

# Controls when the workflow will run
on:
    # Trigger the workflow manually
    workflow_dispatch:
    # Triggers the workflow on push event but only for the branch specified with in []
    # push:
    #   branches: [ main ]

env:
    AWS_REGION: ap-south-1
    ECR_REPOSITORY: wda-server
    ECS_SERVICE: wda-service
    ECS_CLUSTER: wda
    ECS_TASK_DEFINITION: wda-server.json
    CONTAINER_NAME: wda-server

permissions:
    id-token: write # required to use OIDC authentication
    contents: read # required to checkout the code from the repo

jobs:
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Clone Generator-tf-wdi repository
              uses: actions/checkout@v2
              with:
                  repository: tic-oss/generator-tf-wdi
                  ref: main
                  path: generator-tf-wdi
                  # token: ${{ secrets.PAT }} # or ssh-key: ${{ secrets.SSH_KEY }}

            - name: Clone Generator-jhipster repository
              uses: actions/checkout@v2
              with:
                  repository: tic-oss/generator-jhipster
                  ref: main
                  path: generator-jhipster
                  # token: ${{ secrets.PAT }} # or ssh-key: ${{ secrets.SSH_KEY }}

            - name: Clone Jhipster blueprints repository
              uses: actions/checkout@v2
              with:
                  repository: tic-oss/jhipster-blueprints
                  ref: main
                  path: jhipster-blueprints
                  # token: ${{ secrets.PAT }} # or ssh-key: ${{ secrets.SSH_KEY }}

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-region: ${{ env.AWS_REGION }}
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: 'Build, tag, and push image to Amazon ECR'
              id: build-image
              env:
                  ECR_REGISTRY: '${{ steps.login-ecr.outputs.registry }}'
                  IMAGE_TAG: latest
              run: >
                  # Build a docker container and

                  # push it to ECR so that it can

                  # be deployed to ECS.

                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

                  echo "::set-output
                  name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            - name: Download task definition
              run: |
                  aws ecs describe-task-definition --task-definition wda-server \
                  --query taskDefinition > wda-server.json

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: '${{ env.ECS_TASK_DEFINITION }}'
                  container-name: '${{ env.CONTAINER_NAME }}'
                  image: '${{ steps.build-image.outputs.image }}'

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: '${{ steps.task-def.outputs.task-definition }}'
                  service: '${{ env.ECS_SERVICE }}'
                  cluster: '${{ env.ECS_CLUSTER }}'
                  wait-for-service-stability: true
