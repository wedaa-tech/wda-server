name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `main`.
on:
  workflow_dispatch:
  push:
    branches: ['main']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  #IMAGE_VERSION: 1.1

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      # 
    steps:
      - name: Clone Generator-tf-wdi repository
        uses: actions/checkout@v3
        with:
          repository: wedaa-tech/generator-tf-wdi
          ref: main
          path: generator-tf-wdi
          # token: ${{ secrets.PAT }} # or ssh-key: ${{ secrets.SSH_KEY }}

      - name: Clone Generator-jhipster repository
        uses: actions/checkout@v3
        with:
          repository: wedaa-tech/generator-jhipster
          ref: main
          path: generator-jhipster
          # token: ${{ secrets.PAT }} # or ssh-key: ${{ secrets.SSH_KEY }}
      
      - name: Clone Jhipster blueprints repository
        uses: actions/checkout@v3
        with:
          repository: wedaa-tech/jhipster-blueprints
          ref: main
          path: jhipster-blueprints
      
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} #/${{ env.IMAGE_VERSION }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/wedaa-tech/wda-server:latest
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Trigger server-deploy.yml Workflow in Hetzner repository
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
            https://api.github.com/repos/wedaa-tech/hetzner/actions/workflows/server-deploy.yml/dispatches \
            -d '{"ref": "main"}'
      
